rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return isAuthenticated() && uid == request.auth.uid;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isValidComment(comment) {
      return comment.size() == 11
          && 'id' in comment && comment.id is string
          && 'uid' in comment && comment.uid is string
          && 'threadId' in comment && comment.threadId is string
          && 'handlename' in comment && comment.handlename is string
          && 'index' in comment && comment.index is number
          && 'content' in comment && comment.content is string
          && 'isPinned' in comment && comment.isPinned is bool
          && 'isDeleted' in comment && comment.isDeleted is bool
          && 'report' in comment && comment.report is list
          && 'createdAt' in comment && comment.createdAt is timestamp
          && 'updatedAt' in comment && comment.updatedAt is timestamp
    }
    function isValidCommentUpdate(data) {
      return 'updatedAt' in data && data.updatedAt is timestamp
          && ('isPinned' in data && data.isPinned is bool
          || 'isDeleted' in data && data.isDeleted is bool
          || 'report' in data && data.report is list);
    }
    match /users/{uid} {
      function isValid(user) {
        return user.size() == 5
        && 'uid' in user && user.uid is string
        && 'email' in user && user.email is string
        && 'name' in user && user.name is string
        && 'role' in user && user.role is string
        && 'createdAt' in user && user.createdAt is timestamp
      }
      allow get: if isUserAuthenticated(uid);
      allow create: if isValid(request.resource.data);
    }
    match /threads/{threadId} {
      function isValidUpdateCommentsCount(requestData, resourceData) {
        return 'commentsCount' in requestData && requestData.commentsCount is number
            && 'updatedAt' in requestData && requestData.updatedAt is timestamp
            && requestData.commentsCount > resourceData.commentsCount;
      }
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isValidUpdateCommentsCount(request.resource.data, resource.data);
      allow delete: if isAuthenticated()
                    && request.auth.uid == resource.data.uid
                    || isAdmin();
    }
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isValidComment(request.resource.data);
      allow update: if isValidCommentUpdate(request.resource.data)
                    && resource.data.uid == request.auth.uid
                    || isAdmin();
      allow delete: if isAuthenticated()
                    && request.auth.uid == get(/databases/$(database)/documents/threads/$(resource.data.threadId)).data.uid
                    || isAdmin();
    }
    match /likes/{id} {
      function isValid(data) {
        return data.size() == 6
        && 'id' in data && data.id is string
        && 'userId' in data && data.userId is string
        && 'threadId' in data && data.threadId is string
        && 'commentId' in data && data.commentId is string
        && 'createdAt' in data && data.createdAt is timestamp
        && 'updatedAt' in data && data.updatedAt is timestamp
      }
      allow list: if true;
      allow create: if isUserAuthenticated(request.resource.data.userId)
                    && isValid(request.resource.data);
      allow delete: if isAuthenticated()
                    && request.auth.uid == resource.data.userId;
    }
  }
}